// Helper function to load scripts
function loadScript(url) {
    return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = url;
        script.async = true;
        script.onload = resolve;
        script.onerror = reject;
        document.head.appendChild(script);
    });
}

// Load core libraries
async function loadCoreLibraries() {
    const coreLibs = [
        'https://code.jquery.com/jquery-3.7.1.min.js',
        'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js'
    ];
    
    await Promise.all(coreLibs.map(lib => loadScript(lib)));
}

// Load feature-specific scripts on demand
function loadFeatureScripts() {
    const features = {
        slider: ['slick.min.js'],
        popup: ['jquery.magnific-popup.min.js'],
        animation: ['wow.min.js'],
        gallery: ['imagesloaded.pkgd.min.js', 'isotope.pkgd.min.js'],
        scroll: ['lenis.min.js'],
        text: ['SplitText.js', 'marquee.js']
    };

    // Check which features are needed based on page elements
    const neededFeatures = [];
    if (document.querySelector('.slick-slider')) neededFeatures.push('slider');
    if (document.querySelector('.popup-link')) neededFeatures.push('popup');
    if (document.querySelector('.wow')) neededFeatures.push('animation');
    if (document.querySelector('.gallery')) neededFeatures.push('gallery');
    if (document.querySelector('.smooth-scroll')) neededFeatures.push('scroll');
    if (document.querySelector('.split-text')) neededFeatures.push('text');

    // Load needed feature scripts
    return Promise.all(
        neededFeatures.flatMap(feature =>
            features[feature].map(script =>
                loadScript(`assets/js/${script}`)
            )
        )
    );
}

// Initialize components after scripts are loaded
function initComponents() {
    // Initialize back to top button
    if ($('.back-to-top').length) {
        $(window).scroll(function() {
            if ($(this).scrollTop() > 100) {
                $('.back-to-top').addClass('active');
            } else {
                $('.back-to-top').removeClass('active');
            }
        });
    }
}

// Initialize features after core libraries are loaded
async function initApp() {
    try {
        await loadCoreLibraries();
        await Promise.all([
            loadFeatureScripts(),
            loadScript('assets/js/image-loader.min.js')
        ]);
        initComponents();
    } catch (error) {
        console.error('Error initializing app:', error);
    }
}

// Start initialization when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initApp);
} else {
    initApp();
}
